import{h as l}from"./httpClient-DpjTLT7X.js";class S{constructor(){this._domainEvents=[]}addDomainEvent(e){this._domainEvents.push(e)}clearDomainEvents(){this._domainEvents=[]}getDomainEvents(){return[...this._domainEvents]}}class a{equals(e){return e==null||e.constructor!==this.constructor?!1:JSON.stringify(this)===JSON.stringify(e)}}class A extends a{constructor(e){super(),this.value=e}}class F extends a{constructor(e){super(),this.value=e}validate(){var e;if(!((e=this.value)!=null&&e.trim()))throw new Error("El título es requerido");if(this.value.length>100)throw new Error("El título no puede exceder los 100 caracteres")}}class P extends a{constructor(e){super(),this.value=e}validate(){var e;if(!((e=this.value)!=null&&e.trim()))throw new Error("La descripción es requerida");if(this.value.length>2e3)throw new Error("La descripción no puede exceder los 2000 caracteres")}}class C extends a{constructor(e){super(),this.value=e}validate(){if(typeof this.value!="number"||this.value<0)throw new Error("El precio debe ser un número positivo")}format(){return`S/ ${this.value.toFixed(2)}`}}class D extends a{constructor(e){super(),this.value=e}validate(){var e;if(!((e=this.value)!=null&&e.trim()))throw new Error("La ubicación es requerida")}format(){return this.value}}class $ extends a{constructor(e){super(),this.value=e}validate(){var e;if(!((e=this.value)!=null&&e.trim()))throw new Error("La duración es requerida")}format(){return this.value}}class h extends S{constructor({id:e="",title:r="",description:t="",location:i="",duration:n="0 días",price:c=0,images:E=[],included:x=[],notIncluded:y=[],important:g="",agencyId:w="",categories:m=[],sustainability:f={ecoCertifications:[],sustainablePractices:[],localCommunityImpact:""},difficulty:v="medium",maxGroupSize:b=10,languages:R=["Español"],reviews:I=[]}){super(),this.id=new A(e),this.title=new F(r),this.description=new P(t),this.price=new C(c),this.location=new D(i),this.duration=new $(n),this.images=E,this.included=x,this.notIncluded=y,this.important=g,this.agencyId=w,this.categories=m,this.sustainability=f,this.difficulty=v,this.maxGroupSize=b,this.languages=R,this._reviews=I}validate(){var e,r,t,i,n;if(!((r=(e=this.title)==null?void 0:e.value)!=null&&r.trim()))throw new Error("El título es requerido");if(!((i=(t=this.description)==null?void 0:t.value)!=null&&i.trim()))throw new Error("La descripción es requerida");if(!this.agencyId)throw new Error("La experiencia debe estar asociada a una agencia");if(!((n=this.images)!=null&&n.length))throw new Error("Debe incluir al menos una imagen")}addReview(e,r,t){const i={userId:e,rating:r,comment:t,date:new Date};return this._reviews.push(i),i}isEcoFriendly(){return this.sustainability.ecoCertifications.length>0||this.sustainability.sustainablePractices.length>0}getFormattedPrice(){return this.price.format()}getDurationText(){return this.duration.format()}getLocationText(){return this.location.format()}addCategory(e){this.categories.includes(e)||this.categories.push(e)}removeCategory(e){const r=this.categories.indexOf(e);r>-1&&this.categories.splice(r,1)}addSustainablePractice(e){this.sustainability.sustainablePractices.includes(e)||this.sustainability.sustainablePractices.push(e)}addEcoCertification(e){this.sustainability.ecoCertifications.includes(e)||this.sustainability.ecoCertifications.push(e)}toJSON(){return{id:this.id.value,title:this.title.value,description:this.description.value,location:this.location.value,duration:this.duration.value,price:this.price.value,images:[...this.images],included:[...this.included],notIncluded:[...this.notIncluded],important:this.important,agencyId:this.agencyId,categories:[...this.categories],sustainability:{...this.sustainability},difficulty:this.difficulty,maxGroupSize:this.maxGroupSize,languages:[...this.languages],reviews:this._reviews.map(e=>({...e}))}}}class s{static toEntityFromResource(e){var t,i,n;if(!e)return null;console.log("[ExperienceAssembler] Processing resource:",e);const r={id:e.id||Date.now().toString(),title:e.title||"",description:e.description||"",location:e.location||"",duration:(t=e.duration)!=null&&t.value?`${e.duration.value} ${e.duration.unit}`:"0 días",price:((i=e.price)==null?void 0:i.amount)||0,images:e.images||[],included:e.includedItems||[],notIncluded:e.notIncluded||[],important:e.localCommunityImpact||"",agencyId:e.agencyId||"",categories:Array.isArray(e.type)?e.type:[e.type||""],sustainability:{ecoCertifications:e.ecoCertifications||[],sustainablePractices:e.sustainablePractices||[],localCommunityImpact:e.localCommunityImpact||""},difficulty:((n=e.difficultyLevel)==null?void 0:n.toLowerCase())||"medium",maxGroupSize:e.maxParticipants||10,languages:e.languages||["Español"],reviews:e.reviews||[]};return console.log("[ExperienceAssembler] Created entity with ID:",r.id,"Type:",typeof r.id),r}static toEntitiesFromResponse(e){if(console.log("[ExperienceAssembler] Processing response:",e),!e)return console.error("[ExperienceAssembler] No response provided"),[];let r;if(e.data)r=e.data;else if(Array.isArray(e))r=e;else return console.error("[ExperienceAssembler] Invalid response format:",e),[];if(!Array.isArray(r))return console.error("[ExperienceAssembler] Data is not an array:",r),[];console.log("[ExperienceAssembler] Processing",r.length,"experiences");const t=r.map(i=>(console.log("[ExperienceAssembler] Processing experience:",i),this.toEntityFromResource(i)));return console.log("[ExperienceAssembler] Generated entities:",t),t}static toRequestPayload(e){const[r,t]=e.duration.value.split(" ");return{id:e.id.value,title:e.title.value,description:e.description.value,location:e.location.value,duration:{value:parseInt(r),unit:t},price:{amount:e.price.value,currency:"EUR"},images:[...e.images],includedItems:[...e.included],type:e.categories[0],isSustainable:!0,ecoCertifications:e.sustainability.ecoCertifications,sustainablePractices:e.sustainability.sustainablePractices,localCommunityImpact:e.sustainability.localCommunityImpact,agencyId:e.agencyId,maxParticipants:e.maxGroupSize,difficultyLevel:e.difficulty.charAt(0).toUpperCase()+e.difficulty.slice(1),languages:[...e.languages],reviews:e._reviews.map(i=>({...i}))}}}class q{constructor(){this.baseURL="http://localhost:3003"}async getExperiences(){try{return await l.get("/experiences")}catch(e){throw console.error("[ExperiencesApiService] Error fetching experiences:",e),this.handleError(e)}}async getById(e){try{if(!e)throw new Error("Experience ID is required");const r=String(e);return console.log("[ExperiencesApiService] Getting experience by ID:",r),await l.get(`/experiences/${r}`)}catch(r){throw console.error("[ExperiencesApiService] Error fetching experience:",r),this.handleError(r)}}async createExperience(e){try{const r=s.toRequestPayload(e);return await l.post("/experiences",r)}catch(r){throw console.error("[ExperiencesApiService] Error creating experience:",r),this.handleError(r)}}async updateExperience(e,r){try{if(!e)throw new Error("Experience ID is required");const t=s.toRequestPayload(r);return await l.put(`/experiences/${e}`,t)}catch(t){throw console.error("[ExperiencesApiService] Error updating experience:",t),this.handleError(t)}}async deleteExperience(e){try{if(!e)throw new Error("Experience ID is required");return await l.delete(`/experiences/${e}`),{success:!0}}catch(r){throw console.error("[ExperiencesApiService] Error deleting experience:",r),this.handleError(r)}}handleError(e){if(!e.response)return new Error("Network error");switch(e.response.status){case 400:return new Error("Invalid request data");case 401:return new Error("Unauthorized");case 403:return new Error("Forbidden");case 404:return new Error("Experience not found");case 500:return new Error("Server error");default:return e}}}class L{constructor(){this.apiService=new q}async findAll(){try{console.log("[ExperienceRepository] Finding all experiences...");const e=await this.apiService.getExperiences();console.log("[ExperienceRepository] API response:",e);const r=s.toEntitiesFromResponse(e);return console.log("[ExperienceRepository] Assembled entities:",r),r}catch(e){throw console.error("[ExperienceRepository] Error getting experiences:",e),e}}async findById(e){try{const r=String(e);console.log("[ExperienceRepository] Finding experience by ID:",r);const t=await this.apiService.getById(r);return s.toEntityFromResource(t.data)}catch(r){throw console.error(`[ExperienceRepository] Error getting experience with id ${e}:`,r),r}}async save(e){try{const r=await this.apiService.createExperience(e);return s.toEntityFromResource(r.data)}catch(r){throw console.error("[ExperienceRepository] Error saving experience:",r),r}}async update(e,r){try{const t=await this.apiService.updateExperience(e,r);return s.toEntityFromResource(t.data)}catch(t){throw console.error(`[ExperienceRepository] Error updating experience with id ${e}:`,t),t}}async delete(e){try{return await this.apiService.deleteExperience(e),!0}catch(r){throw console.error(`[ExperienceRepository] Error deleting experience with id ${e}:`,r),r}}async findByAgencyId(e){try{return(await this.findAll()).filter(t=>t.agencyId===e)}catch(r){throw console.error(`[ExperienceRepository] Error getting experiences for agency ${e}:`,r),r}}}class p extends Error{constructor(e){super(`Experience with id ${e} not found`),this.name="ExperienceNotFoundError"}}class d extends Error{constructor(e){super(e),this.name="InvalidExperienceDataError"}}class u extends Error{constructor(e){super(e),this.name="ExperienceValidationError"}}class G{constructor(e=new L){this.experienceRepository=e}async getAllExperiences(){try{console.log("[ExperienceService] Getting all experiences...");const e=await this.experienceRepository.findAll();console.log("[ExperienceService] Raw experiences from repo:",e);const r=e.map(t=>s.toEntityFromResource(t));return console.log("[ExperienceService] Assembled experiences:",r),r}catch(e){throw console.error("Error getting experiences:",e),new Error("Failed to fetch experiences")}}async getExperienceById(e){try{console.log("[ExperienceService] Getting experience by ID:",e,"Type:",typeof e);const r=String(e);console.log("[ExperienceService] String ID:",r);const t=await this.experienceRepository.findById(r);if(!t)throw new p(r);return s.toEntityFromResource(t)}catch(r){throw console.error(`Error getting experience with id ${e}:`,r),r instanceof p?r:new d(`Failed to fetch experience with id ${e}`)}}async createExperience(e){try{const r=new h(e);try{r.validate()}catch(i){throw new u(i.message)}const t=await this.experienceRepository.save(s.toRequestPayload(r));return s.toEntityFromResource(t)}catch(r){throw console.error("Error creating experience:",r),r instanceof u?r:new d("Failed to create experience: "+r.message)}}async updateExperience(e,r){try{const t=await this.experienceRepository.findById(e);if(!t)throw new p(e);const i=new h({...s.toEntityFromResource(t).toJSON(),...r});try{i.validate()}catch(c){throw new u(c.message)}const n=await this.experienceRepository.update(e,s.toRequestPayload(i));return s.toEntityFromResource(n)}catch(t){throw console.error(`Error updating experience with id ${e}:`,t),t instanceof p||t instanceof u?t:new d(`Failed to update experience: ${t.message}`)}}async deleteExperience(e){try{if(!await this.experienceRepository.findById(e))throw new Error("Experience not found");return await this.experienceRepository.delete(e),!0}catch(r){throw console.error(`Error deleting experience with id ${e}:`,r),r.message==="Experience not found"?r:new Error("Failed to delete experience")}}async getExperiencesByAgency(e){try{return(await this.experienceRepository.findByAgencyId(e)).map(t=>s.toEntityFromResource(t))}catch(r){throw console.error(`Error getting experiences for agency ${e}:`,r),new Error("Failed to fetch agency experiences")}}async addReview(e,r,t,i){try{const n=await this.getExperienceById(e);if(!n)throw new Error("Experience not found");n.addReview(r,t,i);const c=await this.experienceRepository.save(s.toRequestPayload(n));return s.toEntityFromResource(c)}catch(n){throw console.error(`Error adding review to experience ${e}:`,n),n.message==="Experience not found"?n:new Error("Failed to add review")}}}export{G as E};
